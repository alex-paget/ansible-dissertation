# Enable Nagios monitoring on the headnode to monitor compute nodes

- name: Intall Nagios meta-package on headnode
  yum:
    name: ohpc-nagios
    state: present

# Install nagios plugins in compute image
- name: Install nagios-plugins-all-ohpc in compute node image
  yum:
    name: nagios-plugins-all-ohpc
    state: present
    installroot: "{{ chroot }}"

- name: Install nrpe-ohpc in compute image
  yum:
    name: nrpe-ohpc
    state: present
    installroot: "{{ chroot }}"

# Enable and configure NRPE in compute image
- name: Enable nrpe in chroot
  shell: "chroot {{ chroot}} systemctl enable nrpe"

- name: Comment out allowed_hosts in /etc/nagios/nrpe.cfg in chroot
  replace:
    path: "{{ chroot }}/etc/nagios/nrpe.cfg"
    regexp: "^allowed_hosts="
    replace: "# allowed_hosts="
    backup: yes

- name: Add nrpe port to chroot services
  lineinfile:
    path: "{{ chroot }}/etc/services"
    state: present
    regexp: "nrpe\t\t5666\\/tcp\t\t\\# NRPE"
    line: "nrpe\t\t5666/tcp\t\t# NRPE"
    insertafter: EOF

- name: Add SMS IP to hosts.allow
  lineinfile:
    path: "{{ chroot }}/etc/hosts.allow"
    state: present
    regexp: "nrpe \\: {{ sms_ip }} \\: ALLOW"
    line: "nrpe : {{ sms_ip }} : ALLOW"
    insertafter: EOF

- name: Allow NRPE in hosts.allow
  lineinfile:
    path: "{{ chroot }}/etc/hosts.allow"
    state: present
    regexp: "nrpe \\: ALL \\: DENY"
    line: "nrpe : ALL : DENY"
    insertafter:  EOF

- name: Check if the nrpe group already exists
  shell: "grep nrpe {{ chroot }}/etc/group"
  register: group_output
  ignore_errors: yes

- name: Add NRPE group to chroot
  shell: "chroot {{ chroot }}/usr/sbin/groupadd -r nrpe"
  when: group_output.stdout != ""

- name: Check if nrpe user exists
  shell: "grep nrpe {{ chroot }}/etc/passwd"
  register: user_output
  ignore_errors: yes

- name: Add NRPE user to chroot
  shell: "chroot {{ chroot }} /usr/sbin/useradd -c \"NRPE user for the NRPE service\" - d /var/run/nrpe -r - g nrpe -s /sbin/nologin nrpe"
  when: user_output.stdout != ""

- name: Configure remote services to test on compute nodes
  copy:
    src: /etc/nagios/conf.d/services.cfg.example
    dest: /etc/nagios/conf.d/services.cfg
    remote_src: yes

- name: Copy template hosts.cfg
  template:
    src: hosts.cfg.j2
    dest: /etc/nagios/conf.d/hosts.cfg

# Populate nagios hosts with actual members
- name: Add hosts to /etc/nagios/conf.d/hosts.cfg
  blockinfile:
    path: /etc/nagios/conf.d/hosts.cfg
    state: present
    marker: ""
    insertafter: EOF
    block: |
      define host{
              use linux-box    ; Inherit default values from a template
              host_name {{ c_name }}{{ item }}    ; The name we're giving to this server
              alias {{ c_name }}{{ item }}        ; A longer name for the server
              address {{ c_ip }}{{ c_ip_last | int + item }} ; IP address of Remote Linux host
      }
  with_sequence:
    start=0
    end="{{ num_computes | int - 1}}"

- name: Create list of members
  set_fact:
    members_list: "{{ members_list}} + [ '{{ c_name + item }}' ]"
  with_sequence:
    start=0
    end="{{ num_computes | int - 1}}"

- name: Add hosts to members line in /etc/nagios/conf.d/hosts.cfg
  replace:
    path: /etc/nagios/conf.d/hosts.cfg
    regexp: "members\\(\\.\\*\\)"
    replace: "members {{ members_list }}"

- name: Update location of mail binary for alert commands
  replace:
    path: /etc/nagios/objects/commands.cfg
    regexp: "\\| \\/usr\\/bin\\/mail"
    replace: "/usr/bin/mailx"
    backup: yes

- name: Update email address of contact for alerts
  replace:
   path: /etc/nagios/objects/contacts.cfg
   regexp: "nagios\\@localhost"
   replace: "root@{{ sms_name }}"
   backup: yes

- name: Add check_ssh command for remote hosts
  lineinfile:
    path: "{{ chroot }}/etc/nagios/nrpe.cfg"
    state: present
    regexp: "command\\[check_ssh\\]\\=\\/usr\\/lib64\\/nagios\\/plugins\\/check_ssh localhost"
    line: "command[check_ssh]=/usr/lib64/nagios/plugins/check_ssh localhost"
    insertafter: EOF

- name: Install passlib on remote node
  yum:
    name: python-passlib
    state: present

- name: Define password for nagiosadmin on web interface
  htpasswd:
    path: /etc/nagios/passwd
    state: present
    create: yes
    name: nagiosadmin
    password: "{{ nagios_web_password }}"

# Enable Nagios on master, and configure
- name: Enable nagios
  service:
    name: nagios
    enabled: yes
    state: restarted

- name: chmod which ping
  file:
    path: /bin/ping
    state: touch
    mode: "u+s"
